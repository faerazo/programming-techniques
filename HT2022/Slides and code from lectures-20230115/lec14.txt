
1. B


s = 0
s += 3
s += 3
s += 2

s = 8 at the end

d[4] == {5 : "hej", 6 : "du"}


2. C

3. D

list(map(lambda x: x * 2,
         filter(lambda x: x % 2 == 0,
                range(0,100))))

4. A, B, C

x or (not y and z)

- x is True
OR
- y is False and z is True

5. C

f([9,2,1,3])
== 4 + f([2,1,3])
== 4 + (3 + f([1,3]))
== 4 + (3 + (2 + f([3])))
== 4 + (3 + (2 + (1 + f([]))))
== 4 + (3 + (2 + (1 + 0)))

10

6. D, E

map(function, sequence)
filter(function, sequence)

class A:
    pass

class B:
    pass

class C(A,B):
    pass

strings are immutable
x = "hi"

x += "there" # creates a new string
x = x + "there" # creates a new string

lists are mutable
l = [1,2,3]
l.append(4)

l += [4,5] # modifies the existing list
l = l + [4,5] # create a new list

[1,2,3,4,5]

range(0,1000)

7. D

8. A

9. D

10. E

out = ""
out += 0 * "P" == ""
out += 1 * "y" == "y"
out += 2 * "t" == "tt"
out += 3 * s[3]
....

==================

def f(x,y,z):
    return (x,y,z)

(a,b,c) = f(1,2,3)

a = 1
b = 2
c = 3

13:53 + 10 == 14:03

PART B:

11.

def divisors(v):
    divs = []

    for x in range(1,v):
        if v % x == 0:
           divs.append(x)

    return divs

12.

def exponents(x,mylist):
    return list(map(lambda i: x ** i, mylist))

def exponents(x,mylist):
    return [x ** i for i in mylist]

exponents(2, [1,2,3])

list(map(lambda i: 2 ** i, [1,2,3]))

[2 ** 1, 2 ** 2, 2 ** 3]
[2, 4, 8]

13.

def word_length(f):
    handle = open(f, "r")

    for line in handle:
        words = line.split() # newline gets deleted
        word_lengths = [str(len(word)) for word in words]
        print(" ".join(word_lengths))

    handle.close()

14.

letters = {chr(i + 96) : i for i in range(1,27)}

letters = {}
for i in range(1,27):
    letters[chr(i + 96)] = i

15.

def sum_string(s,d):
    result = 0
    for c in s:
        result += d[c]
    return result

def sum_string(s,d):
    return sum([d[c] for c in s])

16.

def even_odd_sum(mylist):
    if mylist == []:
        return 0
    else:
        x = mylist[0]
        rec = even_odd_sum(mylist[1:])
        if x % 2 == 0:
            return rec + x
        else:
            return rec - x

17.

class Orc:
    def __init__(self, hp, strength):
        self.hp = hp
        self.strength = strength

    def beats(self, orc):
        return self.strength >= orc.strength

18.

class UrukHai(Orc):

    master = 'Saruman' # class attribute

    def __init__(self, hp, strength):
        super().__init__(hp * 2, strength * 2)

19.

from random import randint

while True:
    n1 = randint(0,10)
    n2 = randint(0,10)

    prod_str = input(f"What is {n1} * {n2}? ")

    if prod_str == '':
       print(f"Goodbye! The correct answer was {n1 * n2}")
       break

    try: 
        prod = int(prod_str) # handle exceptions

        if prod == n1 * n2:
           print("Correct!")
        else:
           print(f"Incorrect! The correct answer is {n1 * n2}")
    except ValueError:
        print(f"Input is not a number! The correct answer is {n1 * n2}")

